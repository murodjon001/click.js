{"version":3,"sources":["../src/api-types/shopping-api.ts","../src/constants/api-url.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport sha1 from \"crypto-js/sha1\";\nimport md5 from \"crypto-js/md5\";\nimport { API_URL, COMPLETE_URL, PREPARE_URL } from \"../constants/api-url\";\nimport { IShoppingApi } from \"../interfaces/shopping-api.interface\";\nimport { IShoppingApiParams } from '../interfaces/shopping-api-params.interface';\nimport { IPrepareApiParams } from '../interfaces/prepare-api-params.interface';\nimport { IPrepareApiResponse } from '../interfaces/prepare-api-response.interface';\nimport { ICompleteApiParams } from '../interfaces/complete-api-params.interface';\nimport { ICompleteApiResponse } from '../interfaces/complete-api-response.interface';\n\nexport class ShoppingApi implements IShoppingApi {\n    private clickApiUrl = API_URL;\n\n    private merchant_trans_id!: string; // merchant_trans_id\n    private service_id!: string;\n    private user_id!: string;\n    private secret_key!: string;\n\n    private click_trans_id!: number;\n    private click_paydoc_id!: number;\n    private amount!: number;\n    private action: number = 0\n    private error: number = 0\n    private error_note!: string;\n    private sign_time: string = new Date().toString()\n    private sign_string!: string;\n\n    public setConnectionKeys(params: IShoppingApiParams): void {\n        this.merchant_trans_id = params.merchant_trans_id;\n        this.service_id = params.service_id;\n        this.user_id = params.user_id;\n        this.secret_key = params.secret_key\n    }\n\n    async prepare(params: IPrepareApiParams): Promise<IPrepareApiResponse> {\n        this.validateCredentials()\n        this.signString = params\n        this.otherProperties = params\n\n        try{\n            const res = await this.clickRequest.post(PREPARE_URL, {\n                click_trans_id: params.click_trans_id,\n                click_paydoc_id: params.click_paydoc_id,\n                amount: params.amount,\n                service_id: this.service_id,\n                merchant_trans_id: this.merchant_trans_id,\n                action: this.action,\n                error: this.error,\n                error_note: this.error_note,\n                sign_time: this.sign_time,\n                sign_string: this.sign_string\n            })\n\n            return res.data;\n        }catch(err){\n            console.error(err)\n            throw new Error(\"Error while prepare\")\n        }\n    }\n\n    async complete(params: ICompleteApiParams): Promise<ICompleteApiResponse> {\n        try{\n            const res = await this.clickRequest.post(COMPLETE_URL, {\n                merchant_prepare_id: params.merchant_prepare_id,\n                click_trans_id: this.click_trans_id,\n                click_paydoc_id: this.click_paydoc_id,\n                amount: this.amount,\n                service_id: this.service_id,\n                merchant_trans_id: this.merchant_trans_id,\n                action: this.action,\n                error: this.error,\n                error_note: this.error_note,\n                sign_time: this.sign_time,\n                sign_string: this.sign_string\n            })\n\n            return res.data;\n        }catch(err){\n            console.error(err)\n            throw new Error(\"Error while prepare\")\n        }\n    }\n\n    /**\n     * Sets amount, click_trans_id and click_paydoc_id properties\n     * @private\n     * @param {IPrepareApiParams} \n     */\n\n    private set otherProperties(params: IPrepareApiParams){\n        this.amount = params.amount\n        this.click_trans_id = params.click_trans_id\n        this.click_paydoc_id = params.click_paydoc_id\n    }\n\n    /**\n     * Sets sign_string property\n     * @private\n     * @param {IPrepareApiParams} \n     */\n\n    private set signString(params: IPrepareApiParams){\n        const data =  \n        params.click_trans_id + \n        this.service_id + \n        this.secret_key + \n        this.merchant_trans_id + \n        params.amount + \n        this.action + \n        this.sign_time\n           \n        \n\n        this.sign_string = sha1(data).toString()\n    }\n\n\n    /**\n     * Gets request for click service\n     * @private\n     * @returns {AxiosInstance}\n     */\n    private get clickRequest(): AxiosInstance {\n        return axios.create({\n            baseURL: this.clickApiUrl,\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Auth': this.authorization,\n            }\n        })\n    }\n\n\n    /**\n     * Gets authorization token\n     * @returns {string} \n     * @private\n     */\n    private get authorization (): string{\n        const timestampHash = md5(String(this.timestamp)).toString()\n        const secretKeyHash = md5(this.secret_key).toString()\n\n        return `${this.user_id}:${timestampHash}${secretKeyHash}:${this.timestamp}`\n    }\n\n\n    /**\n     * Gets the current Unix timestamp in seconds.\n     * @private\n     * @returns {number} The current Unix timestamp in seconds.\n     */\n    private get timestamp (): number{\n        return Math.floor(Date.now() / 1000);\n    }\n\n    private validateCredentials(): void {\n        if (!this.secret_key) {\n            throw new Error(\"secret key is required\");\n        }\n\n        if (!this.user_id) {\n            throw new Error(\"user_id is required\");\n        }\n\n        this.clickRequest\n    }\n\n}","export const API_URL = 'https://api.click.uz/v2/merchant/'\n\nexport const PREPARE_URL = API_URL + '/prepare'\nexport const COMPLETE_URL = API_URL +'/complete'\n","import { ShoppingApi } from \"./api-types/shopping-api\";\nimport { TPaymentApi } from \"./types/payment-api.type\";\n\nexport class ClickClient {\n    static create(type: TPaymentApi){\n        if(type === 'shopping_api'){\n            return new ShoppingApi()\n        }\n        // other types\n        else {\n            throw new Error('Invalid API type');\n        }\n    }\n}"],"mappings":"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","names":[]}